// android/app/build.gradle — clean Expo 53 / RN 0.76+

apply plugin: "com.android.application"
apply plugin: "com.facebook.react"    // pas de plugin Kotlin ici

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

react {
  // Entrée bundling compatible Expo
  entryFile = file([
    "node", "-e", "require('expo/scripts/resolveAppEntry')",
    projectRoot, "android", "absolute"
  ].execute(null, rootDir).text.trim())

  reactNativeDir = new File([
    "node", "--print", "require.resolve('react-native/package.json')"
  ].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

  hermesCommand = new File([
    "node", "--print", "require.resolve('react-native/package.json')"
  ].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"

  codegenDir = new File([
    "node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"
  ].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

  // ex-enableBundleCompression : supprimé (option obsolète)
  cliFile = new File([
    "node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"
  ].execute(null, rootDir).text.trim())
  bundleCommand = "export:embed"

  autolinkLibrariesWithApp()
}

def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
  // Laisse Expo/RN fournir ces valeurs via gradle.properties / root ext
  ndkVersion (findProperty('android.ndkVersion') ?: "26.1.10909125")
  compileSdk ((findProperty('android.compileSdkVersion') ?: 35) as int)

  // ⚠️ ne force pas buildToolsVersion ici (laisse gradle.properties)
  // buildToolsVersion rootProject.findProperty("android.buildToolsVersion") ?: "35.0.0"

  namespace "com.guigui92.vigiapp"

  defaultConfig {
    applicationId "com.guigui92.vigiapp"
   minSdkVersion ((findProperty('android.minSdkVersion') ?: 24) as int)
    targetSdkVersion ((findProperty('android.targetSdkVersion') ?: 35) as int)
    versionCode 1
    versionName "1.0.0"
  }

  signingConfigs {
    debug {
      storeFile file('debug.keystore')
      storePassword 'android'
      keyAlias 'androiddebugkey'
      keyPassword 'android'
    }
  }

  buildTypes {
    debug { signingConfig signingConfigs.debug }
    release {
      signingConfig signingConfigs.debug
      shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
      minifyEnabled enableProguardInReleaseBuilds
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
      crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
    }
  }

  packagingOptions {
    jniLibs { useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false) }
  }

  androidResources {
    ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
  }
}

// Applique les options de packaging depuis gradle.properties si défini
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
  def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",")
  for (i in 0..<options.size()) options[i] = options[i].trim()
  options -= ""
  if (options.length > 0) {
    println "android.packagingOptions.$prop += $options ($options.length)"
    options.each { android.packagingOptions[prop] += it }
  }
}

dependencies {
  // RN fournit les versions (via constraints) — pas d’expoLibs ici
  implementation("com.facebook.react:react-android")

  // GIF/WebP : on retire les dépendances Fresco liées au catalog.
  // Si tu en as vraiment besoin, on les remettra proprement plus tard.

  if (hermesEnabled.toBoolean()) {
    implementation("com.facebook.react:hermes-android")
  } else {
    implementation jscFlavor
  }
}
