// Top-level build file où vous pouvez ajouter des options de configuration communes à tous les sous-projets/modules

buildscript {
    ext {
        // Version de Kotlin fixée à 1.9.22 pour compatibilité avec Expo
        kotlinVersion = "1.9.22"
        
        // Versions des SDK Android
        compileSdkVersion = 35
        targetSdkVersion = 34
        minSdkVersion = 23
        ndkVersion = "26.1.10909125"
        buildToolsVersion = "35.0.0"
        
        // Versions des plugins et dépendances
        androidGradlePluginVersion = "8.2.2"
        javaVersion = JavaVersion.VERSION_17
    }
    
    repositories {
        google()
        mavenCentral()
        maven { url 'https://www.jitpack.io' }
        maven { url "$rootDir/../node_modules/react-native/android" }
    }
    
    dependencies {
        classpath("com.android.tools.build:gradle:${ext.androidGradlePluginVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("com.facebook.react:react-native-gradle-plugin:0.76.0")
    }
}

def reactNativeAndroidDir = new File(
    providers.exec {
        workingDir(rootDir)
        commandLine("node", "--print", "require.resolve('react-native/package.json')")
    }.standardOutput.asText.trim(),
    "../android"
)

allprojects {
    repositories {
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url(reactNativeAndroidDir)
        }
        google()
        mavenCentral()
        maven { url 'https://www.jitpack.io' }
        maven { url "$rootDir/../node_modules/react-native/android" }
        
        // Pour les packages spécifiques à Expo
        maven {
            // Local Maven repo containing AARs with JSC library built for Android
            url("$rootDir/../node_modules/jsc-android/dist")
        }
        maven {
            // Android JSC is installed from npm
            url("$rootDir/../node_modules/react-native/android")
        }
    }
}

// Forcer certaines dépendances pour éviter les conflits
subprojects {
    configurations.all {
        resolutionStrategy {
            force 'androidx.browser:browser:1.8.0'
            force 'com.google.android.material:material:1.10.0'
            force 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
        }
    }
    
    afterEvaluate { project ->
        if (project.plugins.hasPlugin('kotlin-android')) {
            kotlin {
                jvmToolchain(17)
            }
        }
        if (project.plugins.hasPlugin('com.android.application')) {
            android {
                namespace 'com.vigiapp'
                compileSdkVersion rootProject.ext.compileSdkVersion
                buildToolsVersion rootProject.ext.buildToolsVersion
                
                compileOptions {
                    sourceCompatibility rootProject.ext.javaVersion
                    targetCompatibility rootProject.ext.javaVersion
                }
            }
        }
    }
}

// Tenter d'appliquer le plugin Expo de façon sécurisée
try {
    def expoPackageJson = new File(
        providers.exec {
            workingDir(rootDir)
            commandLine("node", "--print", "require.resolve('expo/package.json')")
        }.standardOutput.asText.trim()
    )
    def expoRootDir = expoPackageJson.parentFile
    
    if (new File("${expoRootDir}/scripts/autolinking-plugins.gradle").exists()) {
        apply from: "${expoRootDir}/scripts/autolinking-plugins.gradle"
    }
    
    if (new File("${expoRootDir}/scripts/expo-root-project.gradle").exists()) {
        apply from: "${expoRootDir}/scripts/expo-root-project.gradle"
    }
} catch (Exception e) {
    logger.warn("Erreur lors de l'application des plugins Expo: ${e.message}")
}

// Configuration de React Native
def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds')?.toBoolean() ?: false)
def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

try {
    apply plugin: "com.facebook.react.rootproject"
} catch (Exception e) {
    logger.warn("Erreur lors de l'application du plugin React Native: ${e.message}")
}

// Assurez-vous que les fichiers de ressources sont correctement traités
task copyAssets(type: Copy) {
    from "${projectRoot}/assets"
    into "${projectRoot}/android/app/src/main/assets"
}

// Application du plugin react-native si disponible
if (new File("$rootDir/../node_modules/@react-native/gradle-plugin").exists()) {
    apply plugin: "com.facebook.react.rootproject"
}