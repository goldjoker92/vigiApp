{
  "sourceFile": "app/report.jsx",
  "activeCommit": 0,
  "commits": [
    {
      "activePatchIndex": 5,
      "patches": [
        {
          "date": 1758911150502,
          "content": "Index: \n===================================================================\n--- \n+++ \n"
        },
        {
          "date": 1758911187962,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n // - ?o. Toasters UX (queue) : positifs/info/erreur, 4s, barre de temps, non-coll?s aux bords\n // - ?o. Flux MANUEL **ou** AUTO : bouton actif sans GPS si champs requis OK ; g?ocodage si n?cessaire ? l??Tenvoi\n // - ?o. S?quencement toasts :\n //      AUTO: toasts de localisation d??Tabord, puis le vert ??opr?t??? si formulaire complet\n-//      ??? MANUEL: le vert ??opr?t??? sort auto quand tous les champs requis sont OK\n+//      MANUEL: le vert ??opr?t??? sort auto quand tous les champs requis sont OK\n // -------------------------------------------------------------\n \n import React, { useMemo, useRef, useState, useEffect } from 'react';\n import {\n@@ -51,11 +51,8 @@\n \n import { reportNewLexemesRaw } from '../platform_services/observability/mod_signals';\n import { checkReportAcceptable } from '../platform_services/observability/abuse_monitor';\n import { abuseState } from '../platform_services/observability/abuse_strikes';\n-import { reportNewLexemesRaw } from '../platform_services/observability/mod_signals';\n-import { checkReportAcceptable } from '../platform_services/observability/abuse_monitor';\n-import { abuseState } from '../platform_services/observability/abuse_strikes';\n \n // -------------------------------------------------------------\n // Constantes & utilitaires\n // -------------------------------------------------------------\n"
        },
        {
          "date": 1758911204614,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,8 @@\n import { upsertPublicAlert } from '../platform_services/incidents';\n \n import { reportNewLexemesRaw } from '../platform_services/observability/mod_signals';\n import { checkReportAcceptable } from '../platform_services/observability/abuse_monitor';\n-import { abuseState } from '../platform_services/observability/abuse_strikes';\n \n // -------------------------------------------------------------\n // Constantes & utilitaires\n // -------------------------------------------------------------\n"
        },
        {
          "date": 1758911211413,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,8 +50,9 @@\n import { upsertPublicAlert } from '../platform_services/incidents';\n \n import { reportNewLexemesRaw } from '../platform_services/observability/mod_signals';\n import { checkReportAcceptable } from '../platform_services/observability/abuse_monitor';\n+import { abuseState } from '../platform_services/observability/abuse_strikes';\n \n // -------------------------------------------------------------\n // Constantes & utilitaires\n // -------------------------------------------------------------\n"
        },
        {
          "date": 1758911268303,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n import { resolveExactCepFromCoords, GOOGLE_MAPS_KEY } from '../utils/cep';\n import { upsertPublicAlert } from '../platform_services/incidents';\n \n import { reportNewLexemesRaw } from '../platform_services/observability/mod_signals';\n-import { checkReportAcceptable } from '../platform_services/observability/abuse_monitor';\n+import { checkReportAcceptable } from '../platform_services/abuse_monitor';\n import { abuseState } from '../platform_services/observability/abuse_strikes';\n \n // -------------------------------------------------------------\n // Constantes & utilitaires\n"
        },
        {
          "date": 1758911400392,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n import { upsertPublicAlert } from '../platform_services/incidents';\n \n import { reportNewLexemesRaw } from '../platform_services/observability/mod_signals';\n import { checkReportAcceptable } from '../platform_services/abuse_monitor';\n-import { abuseState } from '../platform_services/observability/abuse_strikes';\n+import { abuseState as _abuseState } from '../platform_services/observability/abuse_strikes';\n \n // -------------------------------------------------------------\n // Constantes & utilitaires\n // -------------------------------------------------------------\n@@ -508,9 +508,9 @@\n     if (!coords) {\n       console.log('[REPORT] handleSend ABORT: coords unavailable');\n       return;\n     }\n-    // ---- Conte?do neutro + bloqueio progressivo (3 tentativas => 6h)\n+    // ---- Conte?do neutro + bloqueio progressif (3 tentatives => 6h)\n     const uid = auth.currentUser?.uid || 'anon';\n     const verdict = checkReportAcceptable(descricao, uid);\n     if (!verdict.ok) {\n       console.log('[REPORT][CONTENT] blocked_or_invalid ?', verdict);\n"
        }
      ],
      "date": 1758911150502,
      "name": "Commit-0",
      "content": "// screens/Report.jsx\n// -------------------------------------------------------------\n// R?le : cr?ation d??Tun signalement PUBLIC dans /publicAlerts\n// - Localisation (GPS) -> adresse + CEP (Google-first via utils/cep)\n// - Sauvegarde Firestore avec createdAt + expiresAt = now + 90j (TTL)\n// - Logs [REPORT] pour tout suivre (diagnostic production-friendly)\n// - D?clenchement non-bloquant de la Cloud Function d??Talerte publique\n// - ?o. Toasters UX (queue) : positifs/info/erreur, 4s, barre de temps, non-coll?s aux bords\n// - ?o. Flux MANUEL **ou** AUTO : bouton actif sans GPS si champs requis OK ; g?ocodage si n?cessaire ? l??Tenvoi\n// - ?o. S?quencement toasts :\n//      AUTO: toasts de localisation d??Tabord, puis le vert ??opr?t??? si formulaire complet\n//      ??? MANUEL: le vert ??opr?t??? sort auto quand tous les champs requis sont OK\n// -------------------------------------------------------------\n\nimport React, { useMemo, useRef, useState, useEffect } from 'react';\nimport {\n  Text,\n  TextInput,\n  TouchableOpacity,\n  StyleSheet,\n  ScrollView,\n  Alert,\n  View,\n  ActivityIndicator,\n  Animated,\n  Easing,\n  Platform,\n  Pressable,\n} from 'react-native';\nimport MapView, { Marker } from 'react-native-maps';\nimport * as Location from 'expo-location';\nimport { auth } from '../firebase';\nimport { serverTimestamp, Timestamp } from 'firebase/firestore';\nimport { useRouter } from 'expo-router';\nimport {\n  MapPin,\n  Bell,\n  AlertTriangle,\n  HandHeart,\n  Flame,\n  ShieldAlert,\n  Bolt,\n  Car,\n  FileQuestion,\n  Send,\n  UserX,\n} from 'lucide-react-native';\nimport { useAuthGuard } from '../hooks/useAuthGuard';\nimport { resolveExactCepFromCoords, GOOGLE_MAPS_KEY } from '../utils/cep';\nimport { upsertPublicAlert } from '../platform_services/incidents';\n\nimport { reportNewLexemesRaw } from '../platform_services/observability/mod_signals';\nimport { checkReportAcceptable } from '../platform_services/observability/abuse_monitor';\nimport { abuseState } from '../platform_services/observability/abuse_strikes';\nimport { reportNewLexemesRaw } from '../platform_services/observability/mod_signals';\nimport { checkReportAcceptable } from '../platform_services/observability/abuse_monitor';\nimport { abuseState } from '../platform_services/observability/abuse_strikes';\n\n// -------------------------------------------------------------\n// Constantes & utilitaires\n// -------------------------------------------------------------\n\nconst DB_RETENTION_DAYS = 90; // TTL base (analytics)\n// Rayon fixe V1 pour \"incident\" (danger public)\nconst ALERT_RADIUS_M = 1000;\n\nconst categories = [\n  { label: 'Roubo/Furto', icon: ShieldAlert, severity: 'medium', color: '#FFA500' },\n  { label: 'Agress?o', icon: UserX, severity: 'medium', color: '#FFA500' },\n  { label: 'Incidente de tr?nsito', icon: Car, severity: 'minor', color: '#FFE600' },\n  { label: 'Inc?ndio', icon: Flame, severity: 'grave', color: '#FF3B30' },\n  { label: 'Falta de luz', icon: Bolt, severity: 'minor', color: '#FFE600' },\n  { label: 'Mal s?bito (problema de sa?de)', icon: HandHeart, severity: 'grave', color: '#FF3B30' },\n  { label: 'Outros', icon: FileQuestion, severity: 'minor', color: '#007AFF' },\n];\n\nconst onlyDigits = (v = '') => String(v).replace(/\\D/g, '');\nconst formatCepDisplay = (digits) => (digits ? digits.replace(/(\\d{5})(\\d{3})/, '$1-$2') : '');\n\nconst severityToColor = (sev) => {\n  switch (sev) {\n    case 'minor':\n      return '#FFE600'; // jaune\n    case 'grave':\n      return '#FF3B30'; // rouge\n    case 'medium':\n    default:\n      return '#FFA500'; // orange\n  }\n};\n\nconst buildEnderecoLabel = (ruaNumero, cidade, estado) =>\n  [ruaNumero, cidade && `${cidade}/${estado}`].filter(Boolean).join(' ??\" ');\n\n// -------------------------------------------------------------\n// Validation \"format br?silien\" pour flux MANUEL\n// (CEP optionnel ; si fourni, doit matcher le format)\n// -------------------------------------------------------------\nconst isValidUF = (uf) => /^[A-Z]{2}$/.test(String(uf || '').trim());\nconst hasStreetNumber = (ruaNumero) => /\\d+/.test(String(ruaNumero || '')); // au moins un num?ro\nconst isValidCidade = (cidade) => /^[\\p{L}\\s'.-]+$/u.test(String(cidade || '').trim());\nconst isValidCepIfPresent = (cep) => {\n  const d = onlyDigits(cep || '');\n  return !d || /^\\d{8}$/.test(d); // ok vide OU 8 chiffres\n};\n\nfunction validateBrazilianManualAddress({ ruaNumero, cidade, estado, cep }) {\n  if (!ruaNumero?.trim() || !hasStreetNumber(ruaNumero)) {\n    return { ok: false, msg: '?Y?? Informe rua com n?mero.' };\n  }\n  if (!cidade?.trim() || !isValidCidade(cidade)) {\n    return { ok: false, msg: '?Y?? Cidade inv?lida.' };\n  }\n  if (!estado?.trim() || !isValidUF(estado.toUpperCase())) {\n    return { ok: false, msg: '?Y?? UF deve ter 2 letras (ex.: CE).' };\n  }\n  if (!isValidCepIfPresent(cep)) {\n    return { ok: false, msg: '?Y?? CEP inv?lido (opcional, mas se informado deve ter 8 d?gitos).' };\n  }\n  return { ok: true };\n}\n\n// -------------------------------------------------------------\n// Geocoding (address -> coords) ??\" utilis? pour le flux MANUEL\n// -------------------------------------------------------------\nasync function geocodeAddressToCoords({ ruaNumero, cidade, estado, cep, googleKey }) {\n  try {\n    const addr = [ruaNumero, cidade, estado, cep].filter(Boolean).join(', ');\n    const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(\n      addr,\n    )}&region=br&key=${googleKey}`;\n    console.log('[REPORT][MANUAL][GEO] forward geocode ??', addr);\n    const resp = await fetch(url);\n    const json = await resp.json();\n    if (json.status === 'OK' && json.results?.length) {\n      const first = json.results[0];\n      const loc = first.geometry?.location;\n      if (loc?.lat && loc?.lng) {\n        console.log('[REPORT][MANUAL][GEO] OK lat/lng =', loc);\n        // Tentative d??Textraire un CEP si pas fourni\n        let cepOut = cep || '';\n        const postal = first.address_components?.find((c) => c.types?.includes('postal_code'));\n        if (!cepOut && postal?.long_name) {\n          cepOut = postal.long_name;\n        }\n        return {\n          ok: true,\n          latitude: loc.lat,\n          longitude: loc.lng,\n          cep: cepOut,\n        };\n      }\n    }\n    console.log('[REPORT][MANUAL][GEO] KO :', json.status, json.error_message);\n    return { ok: false, error: json.error_message || json.status || 'GEOCODE_FAILED' };\n  } catch (e) {\n    console.log('[REPORT][MANUAL][GEO] ERROR :', e?.message || String(e));\n    return { ok: false, error: e?.message || 'GEOCODE_ERROR' };\n  }\n}\n\n// -------------------------------------------------------------\n// Toast l?ger avec **QUEUE** (pas de chevauchement)\n// -------------------------------------------------------------\nconst TOAST_DURATION_MS = 4000; // ??^ 4s\n\nfunction useToastQueue() {\n  const [current, setCurrent] = useState(null); // { type, text }\n  const queueRef = useRef([]);\n  const opacity = useRef(new Animated.Value(0)).current;\n  const translateY = useRef(new Animated.Value(-20)).current;\n  const progress = useRef(new Animated.Value(1)).current; // 1 -> 0\n  const timerRef = useRef(null);\n  const activeRef = useRef(false);\n\n  const play = () => {\n    if (activeRef.current) {\n      return;\n    } // d?j? en cours\n    const next = queueRef.current.shift();\n    if (!next) {\n      return;\n    }\n    activeRef.current = true;\n    setCurrent(next);\n    progress.setValue(1);\n\n    Animated.parallel([\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: 140,\n        useNativeDriver: true,\n        easing: Easing.out(Easing.ease),\n      }),\n      Animated.timing(translateY, {\n        toValue: 0,\n        duration: 140,\n        useNativeDriver: true,\n        easing: Easing.out(Easing.ease),\n      }),\n    ]).start();\n\n    Animated.timing(progress, {\n      toValue: 0,\n      duration: TOAST_DURATION_MS,\n      useNativeDriver: false,\n      easing: Easing.linear,\n    }).start();\n\n    timerRef.current = setTimeout(() => {\n      Animated.parallel([\n        Animated.timing(opacity, { toValue: 0, duration: 150, useNativeDriver: true }),\n        Animated.timing(translateY, { toValue: -10, duration: 150, useNativeDriver: true }),\n      ]).start(() => {\n        setCurrent(null);\n        activeRef.current = false;\n        play(); // lance le toast suivant\n      });\n    }, TOAST_DURATION_MS);\n  };\n\n  const show = (toast) => {\n    queueRef.current.push(toast);\n    play();\n  };\n\n  useEffect(() => () => timerRef.current && clearTimeout(timerRef.current), []);\n\n  const ToastOverlay = useMemo(() => {\n    if (!current) {\n      return null;\n    }\n    const bg =\n      current.type === 'success' ? '#0ea15f' : current.type === 'error' ? '#b91c1c' : '#2b2e36';\n    const border =\n      current.type === 'success' ? '#22c55e' : current.type === 'error' ? '#ef4444' : '#3a3f4b';\n    return (\n      <Animated.View\n        pointerEvents=\"none\"\n        style={[\n          styles.toast,\n          { opacity, transform: [{ translateY }], backgroundColor: bg, borderColor: border },\n        ]}\n      >\n        <Text style={styles.toastText}>{current.text}</Text>\n        <View style={styles.toastProgressTrack}>\n          <Animated.View\n            style={{\n              height: '100%',\n              width: progress.interpolate({ inputRange: [0, 1], outputRange: ['0%', '100%'] }),\n              backgroundColor: 'rgba(255,255,255,0.9)',\n              borderRadius: 999,\n            }}\n          />\n        </View>\n      </Animated.View>\n    );\n  }, [current, opacity, translateY, progress]);\n\n  return { show, ToastOverlay };\n}\n\nfunction getMissingFields({ categoria, descricao, ruaNumero, cidade, estado }) {\n  const missing = [];\n  if (!categoria) {\n    missing.push('??? categoria');\n  }\n  if (!String(descricao || '').trim()) {\n    missing.push('??? descri??o');\n  }\n  if (!String(ruaNumero || '').trim()) {\n    missing.push('??? rua e n?mero');\n  }\n  if (!String(cidade || '').trim()) {\n    missing.push('??? cidade');\n  }\n  if (!String(estado || '').trim()) {\n    missing.push('??? estado/UF');\n  }\n  return missing;\n}\n\nfunction showDisabledGuideToast(show, fields) {\n  if (!fields.length) {\n    return;\n  }\n  const text = `?s?? Campos obrigat?rios faltando:\\n${fields.join('\\n')}`;\n  console.log('[REPORT][TOAST][GUIDE] missing =', fields);\n  show({ type: 'error', text });\n}\n\n// -------------------------------------------------------------\n// Composant principal\n// -------------------------------------------------------------\nexport default function ReportScreen() {\n  const router = useRouter();\n  const user = useAuthGuard();\n  const userStatus = user === undefined ? 'loading' : user ? 'ready' : 'guest';\n\n  const { show, ToastOverlay } = useToastQueue();\n\n  // ??tat formulaire\n  const [categoria, setCategoria] = useState(null);\n  const [descricao, setDescricao] = useState('');\n  const [local, setLocal] = useState(null); // { latitude, longitude, ... } ??\" GPS **ou** g?ocodage lors de l??Tenvoi\n  const [ruaNumero, setRuaNumero] = useState('');\n  const [cidade, setCidade] = useState('');\n  const [estado, setEstado] = useState('');\n  const [cep, setCep] = useState('');\n  const [loadingLoc, setLoadingLoc] = useState(false);\n  const [cepPrecision, setCepPrecision] = useState('none');\n\n  // Garde-fou pour le s?quencement AUTO: on retarde le \"pr?t\" pendant l'auto\n  const autoFlowActiveRef = useRef(false);\n\n  const now = new Date();\n  const dateBR = now.toLocaleDateString('pt-BR');\n  const timeBR = now.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });\n\n  const selectedCategory = categories.find((c) => c.label === categoria);\n  const severityColorUI = selectedCategory?.color || '#007AFF';\n\n  // Champs requis (sans GPS)\n  const isBtnActive = !!(\n    categoria &&\n    descricao.trim().length > 0 &&\n    ruaNumero.trim().length > 0 &&\n    cidade.trim().length > 0 &&\n    estado.trim().length > 0\n  );\n\n  // -----------------------------------------------------------\n  // Toast \"pr?t\" auto ??\" en MANUEL uniquement (ou quand l'AUTO est fini)\n  // -----------------------------------------------------------\n  const readyToastShownRef = useRef(false);\n  useEffect(() => {\n    // on n'affiche pas le toast \"pr?t\" si on est en plein flux AUTO\n    if (isBtnActive && !readyToastShownRef.current && !autoFlowActiveRef.current) {\n      console.log('[REPORT][TOAST] ready-toast (form complet, MANUAL or POST-AUTO)');\n      show({ type: 'success', text: '?Y>?? Pronto pra enviar!' });\n      readyToastShownRef.current = true;\n    } else if (!isBtnActive) {\n      readyToastShownRef.current = false;\n    }\n  }, [isBtnActive, show]);\n\n  // -----------------------------------------------------------\n  // AUTO: Localisation -> reverse + CEP (flux AUTO)\n  // -----------------------------------------------------------\n  const handleLocationAutoFlow = async () => {\n    console.log('[REPORT][AUTO] handleLocation START');\n    setLoadingLoc(true);\n    autoFlowActiveRef.current = true;\n    try {\n      const { status } = await Location.requestForegroundPermissionsAsync();\n      console.log('[REPORT][AUTO] Location perm =', status);\n      if (status !== 'granted') {\n        show({ type: 'error', text: '?Y~. Permiss?o de localiza??o negada.' });\n        return;\n      }\n\n      const { coords } = await Location.getCurrentPositionAsync({\n        accuracy: Location.Accuracy.High,\n      });\n      console.log('[REPORT][AUTO] coords =', coords);\n      setLocal(coords);\n\n      // Reverse CEP via util Google-first\n      console.log('[REPORT][AUTO] resolveExactCepFromCoords???');\n      const res = await resolveExactCepFromCoords(coords.latitude, coords.longitude, {\n        googleApiKey: GOOGLE_MAPS_KEY,\n      });\n      console.log('[REPORT][AUTO] resolve result =', {\n        cep: res.cep,\n        addr: res.address,\n        candidates: (res.candidates || []).length,\n      });\n\n      const rua = res.address?.logradouro || '';\n      const numero = res.address?.numero || '';\n      const ruaNumeroVal = (rua && numero ? `${rua}, ${numero}` : rua || numero || '').trim();\n      setRuaNumero(ruaNumeroVal);\n      setCidade(res.address?.cidade || '');\n      const uf = (res.address?.uf || '').toUpperCase();\n      setEstado(uf);\n\n      if (res.cep) {\n        setCep(res.cep);\n        setCepPrecision('exact');\n        // AUTO: localisation d??Tabord\n        show({ type: 'info', text: '?Y\"? Localiza??o atualizada. CEP detectado.' });\n      } else if (Array.isArray(res.candidates) && res.candidates.length > 0) {\n        setCep('');\n        setCepPrecision('needs-confirmation');\n        show({ type: 'info', text: '?\"?? V?rios CEPs poss?veis ??\" confirme o endere?o/CEP.' });\n      } else {\n        setCep('');\n        setCepPrecision('general');\n        show({ type: 'info', text: '?Y\"Z CEP exato n?o encontrado ??\" pode inserir manualmente.' });\n      }\n\n      // Ensuite, si le formulaire est complet -> toast \"pr?t\"\n      // (on le pousse APR?^S les toasts de localisation)\n      const formNowComplete =\n        categoria &&\n        descricao.trim() &&\n        ruaNumeroVal &&\n        (res.address?.cidade || cidade).trim() &&\n        (uf || estado).trim();\n      if (formNowComplete) {\n        console.log('[REPORT][AUTO] Form complete post-geo ?? enqueue ready toast');\n        show({ type: 'success', text: '?Y>?? Pronto pra enviar!' });\n        readyToastShownRef.current = true; // ?vite un doublon via useEffect\n      }\n    } catch (e) {\n      console.log('[REPORT][AUTO] ERREUR =', e?.message || e);\n      show({ type: 'error', text: '?Ys? N?o foi poss?vel obter sua localiza??o.' });\n    } finally {\n      setLoadingLoc(false);\n      autoFlowActiveRef.current = false;\n      console.log('[REPORT][AUTO] handleLocation END');\n    }\n  };\n\n  // -----------------------------------------------------------\n  // Validation l?g?re (toasts rouges si incomplet) ??\" pour SEND\n  // -----------------------------------------------------------\n  const validateForSendCommon = () => {\n    const missing = getMissingFields({ categoria, descricao, ruaNumero, cidade, estado });\n    if (missing.length) {\n      showDisabledGuideToast(show, missing);\n      return false;\n    }\n    return true;\n  };\n\n  // -----------------------------------------------------------\n  // MANUEL: envoi -> g?ocode si pas de coords ; v?rif format BR\n  // -----------------------------------------------------------\n  const handleSendManualFlow = async () => {\n    console.log('[REPORT][MANUAL] handleSendManualFlow');\n    const fmt = validateBrazilianManualAddress({\n      ruaNumero,\n      cidade,\n      estado: estado.toUpperCase(),\n      cep,\n    });\n    if (!fmt.ok) {\n      show({ type: 'error', text: fmt.msg });\n      console.log('[REPORT][MANUAL] format invalid ??', fmt.msg);\n      return null;\n    }\n\n    let coords = local;\n    if (!coords?.latitude || !coords?.longitude) {\n      console.log('[REPORT][MANUAL] no coords ??\" forward geocoding from address???');\n      const g = await geocodeAddressToCoords({\n        ruaNumero,\n        cidade,\n        estado: estado.toUpperCase(),\n        cep: onlyDigits(cep),\n        googleKey: GOOGLE_MAPS_KEY,\n      });\n      if (!g.ok) {\n        show({ type: 'error', text: '?Y\"? Endere?o n?o encontrado. Verifique os campos.' });\n        console.log('[REPORT][MANUAL] forward geocoding FAILED:', g.error);\n        return null;\n      }\n      coords = { latitude: g.latitude, longitude: g.longitude };\n      if (!cep && g.cep) {\n        setCep(g.cep);\n      }\n      if (cepPrecision === 'none') {\n        setCepPrecision('general');\n      }\n    }\n\n    return coords;\n  };\n\n  // -----------------------------------------------------------\n  // AUTO: envoi ??\" coords d?j? pr?sents via handleLocationAutoFlow\n  // -----------------------------------------------------------\n  const handleSendAutoFlow = async () => {\n    console.log('[REPORT][AUTO] handleSendAutoFlow');\n    if (local?.latitude && local?.longitude) {\n      return local;\n    }\n    console.log('[REPORT][AUTO] Missing coords unexpectedly ??\" fallback MANUAL geocode');\n    return await handleSendManualFlow();\n  };\n\n  // -----------------------------------------------------------\n  // Envoi du report (orchestrateur)\n  // -----------------------------------------------------------\n  const handleSend = async () => {\n    console.log('[REPORT] handleSend START');\n\n    // 1) Champs requis ?\n    if (!validateForSendCommon()) {\n      console.log('[REPORT] handleSend ABORT: missing required fields');\n      return;\n    }\n\n    // 2) Flux MANUEL ou AUTO suivant pr?sence coords\n    const isAuto = !!(local?.latitude && local?.longitude);\n    console.log('[REPORT] flow =', isAuto ? 'AUTO' : 'MANUAL');\n\n    let coords = null;\n    coords = isAuto ? await handleSendAutoFlow() : await handleSendManualFlow();\n    if (!coords) {\n      console.log('[REPORT] handleSend ABORT: coords unavailable');\n      return;\n    }\n    // ---- Conte?do neutro + bloqueio progressivo (3 tentativas => 6h)\n    const uid = auth.currentUser?.uid || 'anon';\n    const verdict = checkReportAcceptable(descricao, uid);\n    if (!verdict.ok) {\n      console.log('[REPORT][CONTENT] blocked_or_invalid ?', verdict);\n      show({ type: 'error', text: verdict.msg });\n      return;\n    }\n    // 3) Persist & Propagate\n    try {\n      const expires = new Date(Date.now() + DB_RETENTION_DAYS * 24 * 3600 * 1000);\n      const sev = selectedCategory?.severity;\n      const mappedColor = severityToColor(sev);\n      const enderecoLabel = buildEnderecoLabel(ruaNumero, cidade, estado.toUpperCase());\n\n      const payload = {\n        userId: auth.currentUser?.uid,\n        apelido: user?.apelido || '',\n        username: user?.username || '',\n        categoria,\n        descricao,\n        gravidade: sev || 'medium',\n        color: mappedColor,\n        ruaNumero,\n        cidade,\n        estado: estado.toUpperCase(),\n        cep,\n        cepPrecision,\n        pais: 'BR',\n        location: {\n          latitude: coords.latitude,\n          longitude: coords.longitude,\n          accuracy: local?.accuracy ?? null,\n          heading: local?.heading ?? null,\n          altitudeAccuracy: local?.altitudeAccuracy ?? null,\n          speed: local?.speed ?? null,\n        },\n        date: dateBR,\n        time: timeBR,\n        createdAt: serverTimestamp(),\n        expiresAt: Timestamp.fromDate(expires),\n\n        // ?o. Rayon fixe V1\n        radius: ALERT_RADIUS_M, // compat front si tu lis encore \"radius\"\n        radius_m: ALERT_RADIUS_M, // cl? canonique back\n      };\n\n      await reportNewLexemesRaw(descricao, {\n        feature: 'desc',\n        catHint: 'slang',\n        city: cidade,\n        uf: estado.toUpperCase(),\n      });\n      await reportNewLexemesRaw(descricao, {\n        feature: 'desc',\n        catHint: 'slang',\n        city: cidade,\n        uf: estado.toUpperCase(),\n      });\n      console.log('[REPORT] Firestore payload =', payload);\n      const { id: alertId } = await upsertPublicAlert({\n        user: { uid: auth.currentUser?.uid },\n        coords,\n        payload,\n        ttlDays: DB_RETENTION_DAYS,\n      });\n      console.log('[REPORT] upsert OK => id:', alertId);\n\n      // Cloud Function (non-bloquant)\n      (async () => {\n        try {\n          const body = {\n            alertId,\n            endereco: enderecoLabel,\n            bairro: '',\n            cidade,\n            uf: estado.toUpperCase(),\n            cep: onlyDigits(cep),\n            lat: coords.latitude,\n            lng: coords.longitude,\n\n            // ?o. fixe\n            radius_m: ALERT_RADIUS_M,\n\n            severidade: sev || 'medium',\n            color: mappedColor,\n          };\n\n          console.log('[REPORT] Calling sendPublicAlertByAddress with:', body);\n          const resp = await fetch(\n            'https://southamerica-east1-vigiapp-c7108.cloudfunctions.net/sendPublicAlertByAddress',\n            {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify(body),\n            },\n          );\n          const json = await resp.json().catch(() => null);\n          console.log('[REPORT] sendPublicAlertByAddress response:', {\n            status: resp.status,\n            ok: resp.ok,\n            json,\n          });\n        } catch (err) {\n          console.log('[REPORT] sendPublicAlertByAddress ERROR:', err?.message || String(err));\n        }\n      })();\n\n      // Confirmation + retour\n      Alert.alert('Alerta enviado!', 'Seu alerta foi registrado.');\n      console.log('[REPORT] handleSend SUCCESS ?? navigate home');\n      router.replace('/(tabs)/home');\n    } catch (e) {\n      console.log('[REPORT] Firestore ERROR =', e?.message || e);\n      Alert.alert('Erro', e.message);\n    } finally {\n      console.log('[REPORT] handleSend END');\n    }\n  };\n\n  // -----------------------------------------------------------\n  // RENDER (ordre de hooks stable; gating d??TUI)\n  // -----------------------------------------------------------\n  return (\n    <View style={{ flex: 1, backgroundColor: '#181A20' }}>\n      {ToastOverlay}\n\n      {userStatus !== 'ready' ? (\n        <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n          {userStatus === 'loading' ? (\n            <ActivityIndicator color=\"#22C55E\" />\n          ) : (\n            <Text style={{ color: '#fff', opacity: 0.8 }}>Conecte-se para reportar um alerta.</Text>\n          )}\n        </View>\n      ) : (\n        <ScrollView contentContainerStyle={styles.scrollContainer}>\n          <View style={styles.container}>\n            <View style={styles.alertCard}>\n              <AlertTriangle color=\"#fff\" size={26} style={{ marginRight: 12 }} />\n              <View style={{ flex: 1 }}>\n                <Text style={styles.alertTitle}>?s?? Aten??o!</Text>\n                <Text style={styles.alertMsg}>\n                  Toda declara??o feita no aplicativo envolve sua{' '}\n                  <Text style={{ fontWeight: 'bold' }}>boa f?</Text> e{' '}\n                  <Text style={{ fontWeight: 'bold' }}>responsabilidade</Text>\n                  {'\\n'}\n                  Nunca substitua os servi?os de emerg?ncia!\n                  {'\\n'}\n                  <Text style={{ fontWeight: 'bold' }}>\n                    ?~Z? Ligue 190 (Pol?cia) ou 192 (Samu) em caso de risco ou emerg?ncia.\n                  </Text>\n                </Text>\n              </View>\n            </View>\n\n            <Text style={styles.title}>\n              <Bell color=\"#007AFF\" size={22} style={{ marginRight: 5 }} />\n              Sinalizar um evento p?blico\n            </Text>\n\n            <View style={styles.categoriaGroup}>\n              {categories.map(({ label, icon: Icon, color }) => (\n                <TouchableOpacity\n                  key={label}\n                  style={[\n                    styles.categoriaBtn,\n                    categoria === label && { backgroundColor: color, borderColor: color },\n                  ]}\n                  onPress={() => setCategoria(label)}\n                >\n                  <Icon\n                    size={18}\n                    color={categoria === label ? '#fff' : color}\n                    style={{ marginRight: 7 }}\n                  />\n                  <Text\n                    style={[\n                      styles.categoriaText,\n                      categoria === label && { color: '#fff', fontWeight: 'bold' },\n                    ]}\n                  >\n                    {label}\n                  </Text>\n                </TouchableOpacity>\n              ))}\n            </View>\n\n            <Text style={styles.label}>Descreva o ocorrido</Text>\n            <TextInput\n              style={styles.input}\n              placeholder=\"Descri??o (obrigat?rio)\"\n              value={descricao}\n              onChangeText={setDescricao}\n              multiline\n            />\n\n            <View style={styles.row}>\n              <View style={styles.readonlyField}>\n                <Text style={styles.readonlyLabel}>Data</Text>\n                <Text style={styles.readonlyValue}>{dateBR}</Text>\n              </View>\n              <View style={styles.readonlyField}>\n                <Text style={styles.readonlyLabel}>Hor?rio</Text>\n                <Text style={styles.readonlyValue}>{timeBR}</Text>\n              </View>\n            </View>\n\n            <Text style={styles.label}>Localiza??o</Text>\n            <TextInput\n              style={styles.input}\n              placeholder=\"Rua e n?mero (obrigat?rio)\"\n              value={ruaNumero}\n              onChangeText={setRuaNumero}\n            />\n            <TextInput\n              style={styles.input}\n              placeholder=\"Cidade (obrigat?rio)\"\n              value={cidade}\n              onChangeText={setCidade}\n            />\n            <TextInput\n              style={styles.input}\n              placeholder=\"Estado/UF (ex.: CE) (obrigat?rio)\"\n              value={estado}\n              onChangeText={(v) => setEstado(String(v).toUpperCase())}\n              autoCapitalize=\"characters\"\n              maxLength={2}\n            />\n            <TextInput\n              style={styles.input}\n              placeholder=\"CEP (opcional)\"\n              value={cep}\n              onChangeText={setCep}\n              onBlur={() => setCep((v) => formatCepDisplay(onlyDigits(v)))}\n              keyboardType=\"numeric\"\n            />\n            {cepPrecision !== 'none' && (\n              <Text style={{ color: '#aaa', marginBottom: 6, marginLeft: 2, fontSize: 13 }}>\n                {cepPrecision === 'exact'\n                  ? 'CEP exato detectado.'\n                  : cepPrecision === 'needs-confirmation'\n                    ? 'V?rios CEPs poss?veis ??\" confirme o endere?o/CEP.'\n                    : 'CEP n?o foi identificado ??\" voc? pode inserir manualmente.'}\n              </Text>\n            )}\n\n            <TouchableOpacity\n              style={styles.locBtn}\n              onPress={handleLocationAutoFlow}\n              disabled={loadingLoc}\n            >\n              <MapPin color=\"#007AFF\" size={18} style={{ marginRight: 8 }} />\n              <Text style={styles.locBtnText}>\n                {loadingLoc ? 'Buscando localiza??o...' : 'Usar minha localiza??o atual'}\n              </Text>\n            </TouchableOpacity>\n\n            {local?.latitude && local?.longitude && (\n              <MapView\n                style={styles.map}\n                initialRegion={{\n                  latitude: local.latitude,\n                  longitude: local.longitude,\n                  latitudeDelta: 0.01,\n                  longitudeDelta: 0.01,\n                }}\n              >\n                <Marker coordinate={{ latitude: local.latitude, longitude: local.longitude }} />\n              </MapView>\n            )}\n\n            <Pressable\n              accessibilityRole=\"button\"\n              // Ripple uniquement quand actif (Android). iOS ignore.\n              android_ripple={\n                isBtnActive ? { color: 'rgba(255,255,255,0.2)', borderless: false } : null\n              }\n              onPress={() => {\n                if (!isBtnActive) {\n                  // Pas d'effet visuel, mais on guide imm?diatement\n                  const missing = getMissingFields({\n                    categoria,\n                    descricao,\n                    ruaNumero,\n                    cidade,\n                    estado,\n                  });\n                  showDisabledGuideToast(show, missing);\n                  return;\n                }\n                handleSend();\n              }}\n              style={({ pressed }) => [\n                styles.sendBtn,\n                {\n                  backgroundColor: isBtnActive ? severityColorUI : '#aaa',\n                  // Quand inactif => aucun feedback \"pressed\"\n                  opacity: isBtnActive ? (pressed ? 0.9 : 1) : 1,\n                },\n              ]}\n            >\n              <Send size={20} color=\"#fff\" style={{ marginRight: 8 }} />\n              <Text style={styles.sendBtnText}>Enviar alerta</Text>\n            </Pressable>\n          </View>\n        </ScrollView>\n      )}\n    </View>\n  );\n}\n\n// -------------------------------------------------------------\n// Styles\n// -------------------------------------------------------------\nconst styles = StyleSheet.create({\n  scrollContainer: { paddingBottom: 36, backgroundColor: '#181A20' },\n  container: { padding: 22, flex: 1, backgroundColor: '#181A20' },\n  alertCard: {\n    flexDirection: 'row',\n    backgroundColor: '#FF3B30',\n    padding: 18,\n    borderRadius: 16,\n    alignItems: 'center',\n    marginBottom: 19,\n    marginTop: 18,\n    shadowColor: '#000',\n    shadowOpacity: 0.08,\n    shadowRadius: 7,\n    elevation: 3,\n  },\n  alertTitle: { color: '#fff', fontSize: 17, fontWeight: 'bold', marginBottom: 2 },\n  alertMsg: { color: '#fff', fontSize: 15 },\n  title: {\n    fontSize: 22,\n    fontWeight: 'bold',\n    marginBottom: 15,\n    color: '#fff',\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  categoriaGroup: { flexDirection: 'row', flexWrap: 'wrap', marginBottom: 16, gap: 6 },\n  categoriaBtn: {\n    backgroundColor: '#23262F',\n    padding: 10,\n    borderRadius: 9,\n    margin: 3,\n    flexDirection: 'row',\n    alignItems: 'center',\n    borderWidth: 2,\n    borderColor: '#23262F',\n    minWidth: 110,\n    justifyContent: 'center',\n  },\n  categoriaText: { color: '#007AFF', fontWeight: '500', fontSize: 15 },\n  label: { color: '#fff', marginBottom: 4, marginTop: 12 },\n  input: {\n    borderWidth: 1,\n    borderColor: '#353840',\n    backgroundColor: '#222',\n    color: '#fff',\n    padding: 12,\n    borderRadius: 7,\n    marginBottom: 10,\n  },\n  row: { flexDirection: 'row', gap: 10, marginBottom: 7 },\n  readonlyField: {\n    flex: 1,\n    backgroundColor: '#22252b',\n    borderRadius: 7,\n    padding: 10,\n    alignItems: 'center',\n  },\n  readonlyLabel: { color: '#bbb', fontSize: 13 },\n  readonlyValue: { color: '#fff', fontWeight: 'bold', fontSize: 15, marginTop: 2 },\n  locBtn: {\n    backgroundColor: '#e6f2ff',\n    borderRadius: 8,\n    padding: 12,\n    marginBottom: 9,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  locBtnText: { color: '#007AFF', fontWeight: 'bold' },\n  map: { width: '100%', height: 130, borderRadius: 10, marginBottom: 12, marginTop: 2 },\n  sendBtn: {\n    borderRadius: 10,\n    padding: 17,\n    alignItems: 'center',\n    marginTop: 14,\n    flexDirection: 'row',\n    justifyContent: 'center',\n  },\n  sendBtnText: { color: '#fff', fontWeight: 'bold', fontSize: 18 },\n\n  // Toast styles\n  toast: {\n    position: 'absolute',\n    top: Platform.select({ ios: 84, android: 56, default: 64 }), // un peu plus bas\n    left: 8, // plus large\n    right: 8, // plus large\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    zIndex: 999,\n    elevation: 8,\n    shadowColor: '#000',\n    shadowOpacity: 0.2,\n    shadowRadius: 8,\n    shadowOffset: { width: 0, height: 4 },\n  },\n  toastText: {\n    color: '#fff',\n    fontSize: 15,\n    fontWeight: '600',\n    textAlign: 'center',\n    marginBottom: 6,\n  },\n  toastProgressTrack: {\n    height: 3,\n    backgroundColor: 'rgba(255,255,255,0.25)',\n    borderRadius: 999,\n    overflow: 'hidden',\n  },\n});\n"
    }
  ]
}
