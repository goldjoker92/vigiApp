{
  "sourceFile": "functions/index.js",
  "activeCommit": 0,
  "commits": [
    {
      "activePatchIndex": 0,
      "patches": [
        {
          "date": 1758954431343,
          "content": "Index: \n===================================================================\n--- \n+++ \n"
        }
      ],
      "date": 1758954431343,
      "name": "Commit-0",
      "content": "// functions/index.js\nconst { initializeApp } = require('firebase-admin/app');\nconst { getFirestore } = require('firebase-admin/firestore');\nconst express = require('express');\nconst crypto = require('node:crypto');\nconst { onRequest } = require('firebase-functions/v2/https');\nconst { setGlobalOptions } = require('firebase-functions/v2/options');\nconst { HASH_SCHEMES } = require('./securityConfig.js');\nconst { hashForStorageFromClientPrehash, verifyFromClientPrehash } = require('./passwordService.js');\n\ninitializeApp();\nconst db = getFirestore();\nsetGlobalOptions({ region: 'southamerica-east1', cors: true });\n\nconst app = express();\napp.use(express.json());\n\nfunction sha256HexServerPrefixed(plain) {\n  const buf = crypto\n    .createHash('sha256')\n    .update('v1::' + plain, 'utf8')\n    .digest();\n  return Array.from(buf)\n    .map((b) => b.toString(16).padStart(2, '0'))\n    .join('');\n}\n\nconst usersCol = () => db.collection('users');\n\napp.get('/health', (req, res) =>\n  res.json({ ok: true, service: 'api', region: 'southamerica-east1' }),\n);\n\napp.post('/signup', async (req, res) => {\n  try {\n    const { email, prehash, saltId } = req.body ?? {};\n    if (!email || !prehash || !saltId)\n      return res.status(400).json({ ok: false, code: 'BAD_REQUEST' });\n    if (!Object.hasOwn(HASH_SCHEMES, saltId))\n      return res.status(400).json({ ok: false, code: 'UNSUPPORTED_SALT_ID' });\n\n    const userRef = usersCol().doc(email);\n    const snap = await userRef.get();\n    if (snap.exists) return res.status(409).json({ ok: false, code: 'ALREADY_EXISTS' });\n\n    const rec = await hashForStorageFromClientPrehash(prehash, saltId);\n    await userRef.set({\n      email,\n      storedHash: rec.storedHash,\n      perUserSalt: rec.perUserSalt,\n      hashVersion: rec.hashVersion,\n      createdAt: new Date().toISOString(),\n    });\n\n    return res.json({ ok: true });\n  } catch (e) {\n    console.error(e);\n    return res.status(500).json({ ok: false });\n  }\n});\n\napp.post('/login', async (req, res) => {\n  try {\n    const { email, prehash, saltId, password } = req.body ?? {};\n    if (!email) return res.status(400).json({ ok: false, code: 'BAD_REQUEST' });\n\n    let effectivePrehash;\n    if (prehash && saltId && Object.hasOwn(HASH_SCHEMES, saltId)) {\n      effectivePrehash = prehash;\n    } else if (typeof password === 'string') {\n      effectivePrehash = sha256HexServerPrefixed(password); // fallback legacy\n    } else {\n      return res.status(400).json({ ok: false, code: 'MISSING_CREDENTIALS' });\n    }\n\n    const userRef = usersCol().doc(email);\n    const snap = await userRef.get();\n    if (!snap.exists) return res.status(401).json({ ok: false });\n\n    const user = snap.data();\n    const ok = await verifyFromClientPrehash(effectivePrehash, {\n      storedHash: user.storedHash,\n      perUserSalt: user.perUserSalt,\n      hashVersion: user.hashVersion,\n    });\n\n    if (!ok) return res.status(401).json({ ok: false });\n    return res.json({ ok: true, token: 'FAKE_JWT_FOR_TEST' });\n  } catch (e) {\n    console.error(e);\n    return res.status(500).json({ ok: false });\n  }\n});\n\nexports.api = onRequest(app);\n"
    }
  ]
}
