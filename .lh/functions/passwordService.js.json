{
    "sourceFile": "functions/passwordService.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1758957082721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758957246541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-﻿// functions/passwordService.js\n+// functions/passwordService.js\n const argon2 = require('argon2');\n const { randomBytes } = require('crypto');\n const { defineString } = require('firebase-functions/params');\n const { HASH_SCHEMES } = require('./securityConfig.js');\n"
                },
                {
                    "date": 1758957260130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-﻿// functions/passwordService.js\n+// functions/passwordService.js\n const argon2 = require('argon2');\n const { randomBytes } = require('crypto');\n const { defineString } = require('firebase-functions/params');\n const { HASH_SCHEMES } = require('./securityConfig.js');\n"
                }
            ],
            "date": 1758957082721,
            "name": "Commit-0",
            "content": "// functions/passwordService.js\nconst argon2 = require('argon2');\nconst { randomBytes } = require('crypto');\nconst { defineString } = require('firebase-functions/params');\nconst { HASH_SCHEMES } = require('./securityConfig.js');\n\nconst PEPPER_V1 = defineString('security.pepper_v1');\n\nfunction getPepper(saltId) {\n  const key = HASH_SCHEMES[saltId]?.pepperParamKey;\n  if (!key) throw new Error('Unknown saltId');\n  if (key === 'security.pepper_v1') return PEPPER_V1.value();\n  throw new Error('Pepper key not handled: ' + key);\n}\n\nasync function hashForStorageFromClientPrehash(clientPrehash, saltId) {\n  const pepper = getPepper(saltId);\n  if (!pepper) throw new Error('Missing pepper - set functions config');\n  const perUserSalt = randomBytes(16).toString('hex');\n  const toHash = `${clientPrehash}:${pepper}:${perUserSalt}`;\n  const stored = await argon2.hash(toHash, {\n    type: argon2.argon2id,\n    memoryCost: 65536,\n    timeCost: 3,\n    parallelism: 1,\n  });\n  return { storedHash: stored, perUserSalt, hashVersion: saltId };\n}\n\nasync function verifyFromClientPrehash(clientPrehash, user) {\n  const pepper = getPepper(user.hashVersion);\n  if (!pepper) throw new Error('Missing pepper - set functions config');\n  const toVerify = `${clientPrehash}:${pepper}:${user.perUserSalt}`;\n  return argon2.verify(user.storedHash, toVerify);\n}\n\nmodule.exports = {\n  hashForStorageFromClientPrehash,\n  verifyFromClientPrehash,\n};\n"
        }
    ]
}