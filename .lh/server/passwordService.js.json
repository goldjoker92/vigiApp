{
  "sourceFile": "server/passwordService.js",
  "activeCommit": 0,
  "commits": [
    {
      "activePatchIndex": 1,
      "patches": [
        {
          "date": 1758953182937,
          "content": "Index: \n===================================================================\n--- \n+++ \n"
        },
        {
          "date": 1758953241761,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,18 +5,18 @@\n import argon2 from 'argon2';\n import { randomBytes } from 'crypto';\n import { HASH_SCHEMES } from './securityConfig.js';\n \n-const PEPPER_ENV_MAP = {\n-  // Add all allowed env variable names here, e.g.:\n-  // 'PEPPER1': process.env.PEPPER1,\n-  // 'PEPPER2': process.env.PEPPER2,\n+const ENV_MAP = {\n+  API_KEY: process.env.API_KEY,\n+  DB_URL: process.env.DB_URL,\n+  // Add other known env vars here\n };\n \n function getPepper(saltId) {\n   const env = HASH_SCHEMES[saltId]?.pepperEnvVar;\n   if (!env) {throw new Error('Unknown saltId');}\n-  const val = PEPPER_ENV_MAP[env];\n+  const val = ENV_MAP[env]; // env must be a key in ENV_MAP\n   if (!val) {throw new Error(`Missing pepper env: ${env}`);}\n   return val;\n }\n \n"
        }
      ],
      "date": 1758953182937,
      "name": "Commit-0",
      "content": "/**\n * server/passwordService.js\n * Hash/verify server-side avec Argon2id + pepper + per-user salt.\n */\nimport argon2 from 'argon2';\nimport { randomBytes } from 'crypto';\nimport { HASH_SCHEMES } from './securityConfig.js';\n\nconst PEPPER_ENV_MAP = {\n  // Add all allowed env variable names here, e.g.:\n  // 'PEPPER1': process.env.PEPPER1,\n  // 'PEPPER2': process.env.PEPPER2,\n};\n\nfunction getPepper(saltId) {\n  const env = HASH_SCHEMES[saltId]?.pepperEnvVar;\n  if (!env) {throw new Error('Unknown saltId');}\n  const val = PEPPER_ENV_MAP[env];\n  if (!val) {throw new Error(`Missing pepper env: ${env}`);}\n  return val;\n}\n\nexport async function hashForStorageFromClientPrehash(clientPrehash, saltId) {\n  const pepper = getPepper(saltId);\n  const perUserSalt = randomBytes(16).toString('hex');\n  const toHash = `${clientPrehash}:${pepper}:${perUserSalt}`;\n  const stored = await argon2.hash(toHash, {\n    type: argon2.argon2id,\n    memoryCost: 65536,\n    timeCost: 3,\n    parallelism: 1,\n  });\n  return { storedHash: stored, perUserSalt, hashVersion: saltId };\n}\n\nexport async function verifyFromClientPrehash(clientPrehash, user) {\n  const pepper = getPepper(user.hashVersion);\n  const toVerify = `${clientPrehash}:${pepper}:${user.perUserSalt}`;\n  return argon2.verify(user.storedHash, toVerify);\n}\n"
    }
  ]
}
