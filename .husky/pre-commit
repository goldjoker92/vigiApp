#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# cross-plateformes temp dir
TMP_DIR="$(node -e "console.log(require('os').tmpdir())")"
PC_LINT="$TMP_DIR/husky_precommit_lint.txt"
PC_TEST="$TMP_DIR/husky_precommit_test.txt"

step() {
  i="$1"; label="$2"; shift 2
  start=$(date +%s 2>/dev/null || echo 0)
  printf "[%s] %s … " "$i" "$label"
  # on capture la sortie du step
  ( "$@" ) >"$3" 2>&1
  code=$?
  end=$(date +%s 2>/dev/null || echo 0)
  dur=$(( end>start ? end-start : 0 ))
  if [ $code -eq 0 ]; then
    printf "OK (%ss)\n" "$dur"
  else
    printf "✖ FAIL (%ss)\n" "$dur"
  fi
  return $code
}

echo "[husky] pre-commit (non-bloquant)"

# 1) Lint+format (lint-staged) — non bloquant
step "1/3" "Lint+Format (lint-staged)" \
  npx --no-install lint-staged "$@" "$PC_LINT" || true

# 2) Tests rapides — non bloquant
#   Astuce: crée un dossier tmp pour tests s'il faut
node -e "require('fs').mkdirSync('tmp',{recursive:true})" >/dev/null 2>&1 || true
step "2/3" "Tests rapides (jest:quick)" \
  npm run test:quick --silent "$PC_TEST" || true

# 3) Consolide dans le rapport (toujours en haut)
#    On forge un petit markdown synthétique + on append les détails capturés
node - <<'EOF' | node scripts/husky-report-single.js --hook pre-commit || echo "[husky] rapport partiel"
const fs = require('fs');
const path = require('path');
const os = require('os');
const pLint = path.join(os.tmpdir(), 'husky_precommit_lint.txt');
const pTest = path.join(os.tmpdir(), 'husky_precommit_test.txt');

function take(name, p) {
  let body = '(aucune sortie)';
  try { body = fs.readFileSync(p, 'utf8').trim() || body; } catch {}
  return `### ${name}\n\n\`\`\`\n${body.slice(0,8000)}\n\`\`\``;
}

let out = `### Résumé pre-commit\n\n- Lint+Format : check\n- Tests rapides : check\n\n`;
out += take('Lint+Format (lint-staged)', pLint) + '\n\n';
out += take('Tests rapides', pTest) + '\n';
process.stdout.write(out);
EOF

exit 0
