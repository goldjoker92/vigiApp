#!/usr/bin/env bash
# .husky/pre-push  ‚Äî  NON BLOQUANT
# - Ouvre un rapport HTML (Chrome si possible, sinon navigateur par d√©faut)
# - Affiche un lien file:// cliquable
# - Pose des questions (15s) mais NE BLOQUE JAMAIS le push
# - Tol√®re les erreurs (retourne toujours 0)

set +e  # ne pas stopper sur erreurs
# pipefail off pour √©viter des exits non voulus
set +o pipefail

REPORT_DIR=".husky/logs"
REPORT_FILE="$REPORT_DIR/last-prepush-report.html"
mkdir -p "$REPORT_DIR" 2>/dev/null || true

have() { command -v "$1" >/dev/null 2>&1; }

status_cell() {
  case "$1" in
    ok)   echo "<td class='ok'>‚úÖ OK</td>";;
    warn) echo "<td class='warn'>‚ö†Ô∏è Warning</td>";;
    err)  echo "<td class='err'>‚ùå Error</td>";;
    *)    echo "<td>$1</td>";;
  esac
}

row() {
  local LABEL="$1" STATUS="$2" RECO="$3" LINK="$4"
  echo "<tr><td>$LABEL</td>$(status_cell "$STATUS")<td>$RECO</td><td><a href='$LINK' target='_blank'>link</a></td></tr>" >> "$REPORT_FILE"
  case "$STATUS" in
    ok)   OK_CNT=$((OK_CNT+1));;
    warn) WARN_CNT=$((WARN_CNT+1));;
    err)  ERR_CNT=$((ERR_CNT+1));;
  esac
}

# Question 15s ‚Äî robuste m√™me si la lecture √©choue
ask_and_maybe_run() {
  local MSG="$1" CMD="$2"
  echo ""
  echo "‚ùì $MSG"
  echo "üëâ Lancer la commande ? (y/n, auto-continuer en 15s)"
  echo "   $CMD"

  local ANS=""
  for i in $(seq 15 -1 1); do
    printf "‚è≥ Attente‚Ä¶ %2ds restantes (y/n): " "$i"
    # read -t fonctionne en bash; si √ßa √©choue, on consid√®re "pas de r√©ponse"
    if read -r -t 1 ANS 2>/dev/null; then
      echo ""
      if [ "$ANS" = "y" ]; then
        echo "‚ñ∂Ô∏è  Ex√©cution: $CMD"
        # on ignore l‚Äôissue de la commande (jamais bloquant)
        bash -lc "$CMD" || true
        return 0
      elif [ "$ANS" = "n" ]; then
        echo "‚è© Ignor√© (on continue le push)."
        return 0
      fi
    else
      echo "" >/dev/null
    fi
  done
  echo "‚è© Pas de r√©ponse ‚Üí on continue le push."
}

abs_path() {
  if have realpath; then realpath "$1"
  else
    (cd "$(dirname "$1")" && pwd)/"$(basename "$1")"
  fi
}

open_report() {
  local ABS FILE_URL
  ABS="$(abs_path "$REPORT_FILE")"
  FILE_URL="file://$ABS"

  # macOS
  if have open; then
    if [ -d "/Applications/Google Chrome.app" ]; then
      open -a "Google Chrome" "$ABS" >/dev/null 2>&1 || open "$ABS" >/dev/null 2>&1 || true
    else
      open "$ABS" >/dev/null 2>&1 || true
    fi
  # Linux
  elif have xdg-open; then
    if have google-chrome; then
      (google-chrome "$ABS" >/dev/null 2>&1 || xdg-open "$ABS" >/dev/null 2>&1) || true
    elif have chromium; then
      (chromium "$ABS" >/dev/null 2>&1 || xdg-open "$ABS" >/dev/null 2>&1) || true
    else
      xdg-open "$ABS" >/dev/null 2>&1 || true
    fi
  # Git Bash/Windows (best effort)
  elif have start; then
    start "" "$ABS" >/dev/null 2>&1 || true
  fi

  echo ""
  echo "üëâ Rapport ouvert dans le navigateur (si possible)."
  echo "üîó Lien: \033[32mfile://$ABS\033[0m"
  echo ""
}

# ---------- G√©n√©ration HTML ----------
OK_CNT=0; WARN_CNT=0; ERR_CNT=0
cat > "$REPORT_FILE" <<'EOF'
<!DOCTYPE html>
<html lang="fr">
<head>
<meta charset="UTF-8">
<title>Husky Pre-push Report</title>
<style>
  body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; background:#181A20; color:#EEE; padding:20px; }
  h1 { color:#22C55E; margin:0 0 8px; }
  #subtitle { color:#9aa3b2; margin:0 0 16px; }
  table { width:100%; border-collapse:collapse; margin-top:12px; }
  th, td { padding:10px; border:1px solid #333; text-align:left; }
  th { background:#222; }
  .ok { color:#22C55E; font-weight:bold; }
  .warn { color:#FACC15; font-weight:bold; }
  .err { color:#EF4444; font-weight:bold; }
  a { color:#22C55E; font-weight:bold; text-decoration:none; }
  a:hover { text-decoration:underline; }
  .summary { margin-top:18px; padding:12px; background:#11151c; border:1px solid #2a2f3a; border-radius:8px; }
</style>
</head>
<body>
<h1>üö¶ Husky Pre-push Report</h1>
<p id="subtitle">R√©sum√© des v√©rifications locales avant push.</p>
<table>
<tr><th>V√©rification</th><th>Statut</th><th>Recommandation</th><th>Docs</th></tr>
EOF

# ---------- Checks exemple (ajuste librement) ----------
if have node; then
  NODE_V="$(node -v 2>/dev/null)"
  row "Node pr√©sent ($NODE_V)" ok "OK" "https://nodejs.org"
else
  row "Node non trouv√©" err "Installer Node (>=18)" "https://nodejs.org/en/download"
  ask_and_maybe_run "Installer Node via nvm ?" "curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash"
fi

# package manager
if have pnpm; then PM="pnpm"
elif have yarn; then PM="yarn"
else PM="npm"; fi
row "Package manager d√©tect√©" ok "Utilisation de $PM" "https://pnpm.io / https://yarnpkg.com / https://docs.npmjs.com"

# lint (jamais bloquant)
if [ -f package.json ]; then
  ask_and_maybe_run "Ex√©cuter le lint maintenant ?" "$PM run lint"
  if [ $? -eq 0 ]; then
    row "Lint" ok "OK ou ignor√©" "cmd:$PM run lint"
  else
    row "Lint" warn "Des avertissements possibles (push non bloqu√©)" "cmd:$PM run lint"
  fi
else
  row "package.json absent" warn "Projet non JS/TS ? Ignor√©." "#"
fi

# expo doctor (optionnel)
if have expo; then
  ask_and_maybe_run "Ex√©cuter expo doctor ?" "expo doctor --fix"
  if [ $? -eq 0 ]; then
    row "Expo doctor" ok "OK ou ignor√©" "cmd:expo doctor --fix"
  else
    row "Expo doctor" warn "Corrige via 'expo doctor --fix' si besoin" "cmd:expo doctor --fix"
  fi
fi

# lockfile
if [ -f pnpm-lock.yaml ] || [ -f yarn.lock ] || [ -f package-lock.json ]; then
  row "Lockfile pr√©sent" ok "OK" "#"
else
  row "Lockfile absent" warn "G√©n√®re un lockfile pour builds reproductibles" "https://classic.yarnpkg.com/lang/en/docs/yarn-lock"
fi

# ---------- Conclusion ----------
CONCLUSION="‚úÖ Conclusion : push autoris√©."
if [ "$ERR_CNT" -gt 0 ]; then
  CONCLUSION="‚úÖ Conclusion : push autoris√©. Des erreurs ont √©t√© d√©tect√©es mais n'emp√™chent pas le push."
elif [ "$WARN_CNT" -gt 0 ]; then
  CONCLUSION="‚úÖ Conclusion : push autoris√©. Quelques avertissements sont √† consid√©rer."
fi

cat >> "$REPORT_FILE" <<EOF
</table>
<div class="summary">
  <div><strong>OK:</strong> $OK_CNT &nbsp;&nbsp; <strong>Warnings:</strong> $WARN_CNT &nbsp;&nbsp; <strong>Errors:</strong> $ERR_CNT</div>
  <p style="margin:10px 0 0;">$CONCLUSION</p>
</div>
</body></html>
EOF

# Ouvrir le rapport (et ne jamais √©chouer si l'ouverture rate)
open_report || true

echo "‚úÖ [husky] Pre-push termin√©. Le push continue."
# >>>> GARANTIE NON-BLOQUANTE <<<<
exit 0
