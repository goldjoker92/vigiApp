#!/bin/sh
set +e

REPORT_DIR=".husky/logs"
mkdir -p "$REPORT_DIR"
REPORT_FILE="$REPORT_DIR/last-prepush-report.html"

# ---------- Helpers ----------
have() { command -v "$1" >/dev/null 2>&1; }
status_ok()   { echo "<td class='ok'>‚úÖ OK</td>"; }
status_warn() { echo "<td class='warn'>‚ö†Ô∏è Warning</td>"; }
status_err()  { echo "<td class='err'>‚ùå Error</td>"; }
row() { echo "<tr><td>$1</td>$2<td>$3</td><td><a href='$4'>link</a></td></tr>" >> "$REPORT_FILE"; }

ask_and_run() {
  local msg="$1"
  local cmd="$2"
  echo ""
  echo "‚ùì $msg"
  echo "üëâ Run command? (y/n, auto-skip in 15s)"
  echo "   $cmd"

  local ans=""
  for i in $(seq 15 -1 1); do
    echo -ne "\r‚è≥ Waiting ($i s)... "
    read -t 1 ans
    if [ "$ans" = "y" ]; then
      echo ""
      echo "‚ñ∂Ô∏è Running: $cmd"
      eval "$cmd"
      return 0
    elif [ "$ans" = "n" ]; then
      echo ""
      echo "‚è© Skipped."
      return 0
    fi
  done
  echo ""
  echo "‚è© No response, skipped."
}

# ---------- Start HTML ----------
cat > "$REPORT_FILE" <<EOF
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Husky Pre-push Report</title>
<style>
  body { font-family:sans-serif; background:#181A20; color:#EEE; padding:20px; }
  h1 { color:#22C55E; }
  table { width:100%; border-collapse:collapse; margin-top:20px; }
  th, td { padding:10px; border:1px solid #333; text-align:left; }
  th { background:#222; }
  .ok { color:#22C55E; font-weight:bold; }
  .warn { color:#FACC15; font-weight:bold; }
  .err { color:#EF4444; font-weight:bold; }
  a { color:#22C55E; font-weight:bold; text-decoration:none; }
  a:hover { text-decoration:underline; }
</style>
</head>
<body>
<h1>üö¶ Husky Pre-push Report</h1>
<p>You can click on the green link to see documentation or run recommended fixes.</p>
<table>
<tr><th>Check</th><th>Status</th><th>Recommendation</th><th>Docs</th></tr>
EOF

# ---------- Node ----------
NODE_VER="$(node -v 2>/dev/null || echo 'absent')"
NODE_MAJOR=$(echo "$NODE_VER" | sed 's/v//' | cut -d. -f1)
if [ "$NODE_VER" = "absent" ]; then
  row "Node.js" "$(status_err)" "Install Node.js >= 18" "https://nodejs.org/"
elif [ "$NODE_MAJOR" -lt 18 ]; then
  row "Node.js ($NODE_VER)" "$(status_warn)" "Use: nvm install 18 && nvm use 18" "https://nodejs.org/"
else
  row "Node.js ($NODE_VER)" "$(status_ok)" "-" "https://nodejs.org/"
fi

# ---------- Yarn ----------
YARN_VER="$(yarn -v 2>/dev/null || echo 'absent')"
if [ "$YARN_VER" = "absent" ]; then
  row "Yarn" "$(status_warn)" "Install with: npm i -g yarn" "https://yarnpkg.com/"
else
  row "Yarn ($YARN_VER)" "$(status_ok)" "-" "https://yarnpkg.com/"
fi

# ---------- Expo CLI ----------
if have expo; then
  EXPO_VER="$(expo --version 2>/dev/null)"
  row "Expo CLI ($EXPO_VER)" "$(status_ok)" "-" "https://docs.expo.dev/"
else
  row "Expo CLI" "$(status_warn)" "Install with: npm i -g expo-cli" "https://docs.expo.dev/"
fi

# ---------- Expo deps ----------
if have npx; then
  CI=1 npx expo install --check >/dev/null 2>&1
  if [ $? -ne 0 ]; then
    row "Expo deps" "$(status_warn)" "Run: npx expo install" "https://docs.expo.dev/workflow/expo-cli/"
    ask_and_run "Expo dependencies mismatch detected." "npx expo install"
  else
    row "Expo deps" "$(status_ok)" "-" "https://docs.expo.dev/workflow/expo-cli/"
  fi
fi

# ---------- Lockfile ----------
if [ "$YARN_VER" != "absent" ]; then
  YARN_MAJOR=$(echo "$YARN_VER" | cut -d. -f1)
  if [ "$YARN_MAJOR" -ge 2 ]; then
    CI=1 yarn install --immutable --mode=skip-build >/dev/null 2>&1
    if [ $? -ne 0 ]; then
      row "Yarn Lockfile (Berry)" "$(status_warn)" "Run: yarn install && yarn dedupe" "https://yarnpkg.com/cli/dedupe"
      ask_and_run "Yarn lockfile drift detected (Berry)." "yarn install && yarn dedupe"
    else
      row "Yarn Lockfile (Berry)" "$(status_ok)" "-" "https://yarnpkg.com/"
    fi
  else
    CI=1 yarn install --frozen-lockfile --ignore-scripts >/dev/null 2>&1
    if [ $? -ne 0 ]; then
      row "Yarn Lockfile (v1)" "$(status_warn)" "Run: yarn install && npx yarn-deduplicate yarn.lock" "https://classic.yarnpkg.com/"
      ask_and_run "Yarn lockfile drift detected (v1)." "yarn install && npx yarn-deduplicate yarn.lock"
    else
      row "Yarn Lockfile (v1)" "$(status_ok)" "-" "https://classic.yarnpkg.com/"
    fi
  fi
fi

# ---------- Expo doctor ----------
if have npx; then
  npx expo doctor >/dev/null 2>&1
  if [ $? -ne 0 ]; then
    row "Expo Doctor" "$(status_warn)" "Run: npx expo doctor" "https://docs.expo.dev/"
    ask_and_run "Expo doctor found issues." "npx expo doctor"
  else
    row "Expo Doctor" "$(status_ok)" "-" "https://docs.expo.dev/"
  fi
fi

# ---------- Close HTML ----------
cat >> "$REPORT_FILE" <<EOF
</table>
<p style="margin-top:20px;font-weight:bold;">
‚úÖ Conclusion: Your push is allowed. Some checks may need attention (‚ö†Ô∏è), 
but nothing blocks the push. Use the recommendations above to fix your environment.
</p>
</body></html>
EOF

echo ""
echo "‚úÖ [husky] Pre-push finished. Push allowed."
echo "üëâ You can click on this green link to see the detailed report:"
echo -e "\033[32mfile://$REPORT_FILE\033[0m"
echo ""

# ---------- Auto-open in Chrome (optionnel, commente si tu veux pas) ----------
case "$(uname)" in
  Darwin*) open -a "Google Chrome" "$REPORT_FILE" ;;
  Linux*) google-chrome "$REPORT_FILE" >/dev/null 2>&1 & ;;
  MINGW*|MSYS*|CYGWIN*) start chrome "$REPORT_FILE" ;;
esac

exit 0
