#!/usr/bin/env sh
# .husky/pre-push ‚Äî NON BLOQUANT / WINDOWS-FRIENDLY / 15s PROMPT
# - G√©n√®re un rapport HTML
# - Ouvre en arri√®re-plan (PowerShell/open/xdg-open)
# - Propose des corrections (y/n, 15s). Aucune action n‚Äôemp√™che le push.
# - Retourne TOUJOURS 0

# Ne jamais stopper sur erreur
set +e

REPORT_DIR=".husky/logs"
REPORT_FILE="$REPORT_DIR/last-prepush-report.html"
mkdir -p "$REPORT_DIR" 2>/dev/null || true

have() { command -v "$1" >/dev/null 2>&1; }

status_cell() {
  case "$1" in
    ok)   printf "<td class='ok'>‚úÖ OK</td>";;
    warn) printf "<td class='warn'>‚ö†Ô∏è Warning</td>";;
    err)  printf "<td class='err'>‚ùå Error</td>";;
    *)    printf "<td>%s</td>" "$1";;
  esac
}

row() {
  LABEL="$1"; STATUS="$2"; RECO="$3"; LINK="$4"
  printf "<tr><td>%s</td>%s<td>%s</td><td><a href='%s' target='_blank'>link</a></td></tr>\n" \
    "$LABEL" "$(status_cell "$STATUS")" "$RECO" "$LINK" >> "$REPORT_FILE"
}

# ---------- PROMPT 15s : renvoie 'y', 'n' ou cha√Æne vide ----------
prompt_yn_15s() {
  # 1) Windows/PowerShell (fiable dans VS Code et Git Bash)
  if have powershell.exe; then
    powershell.exe -NoProfile -ExecutionPolicy Bypass -Command "
      \$deadline=(Get-Date).AddSeconds(15);
      Write-Host '‚ùì $1';
      Write-Host 'üëâ R√©pondre y/n (auto-continue dans 15s)...';
      while((Get-Date) -lt \$deadline){
        if(\$Host.UI.RawUI.KeyAvailable){
          \$k=\$Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown');
          \$c=\$k.Character.ToString().ToLower();
          if(\$c -eq 'y' -or \$c -eq 'n'){ Write-Output \$c; break }
        }
        Start-Sleep -Milliseconds 200
      }
    " 2>/dev/null | tr -d '\r'
    return 0
  fi
  # 2) POSIX : boucle read -t
  i=15; ans=""
  echo "‚ùì $1"
  echo "üëâ R√©pondre y/n (auto-continue dans 15s)..."
  while [ $i -gt 0 ]; do
    printf "‚è≥ %2ds restantes : " "$i"
    if read -r -t 1 ans 2>/dev/null; then
      echo ""
      printf "%s" "$ans"
      return 0
    fi
    echo ""
    i=$((i-1))
  done
  printf ""
}

# ---------- EXEC EN ARRI√àRE-PLAN (n‚Äôattend pas, ne bloque pas) ----------
bg_run() {
  CMD="$1"
  if have powershell.exe; then
    # Essaie avec √©l√©vation minimale si n√©cessaire
    powershell.exe -NoProfile -ExecutionPolicy Bypass -Command "Start-Process -WindowStyle Hidden -Verb Open -FilePath 'cmd.exe' -ArgumentList '/c $CMD'" >/dev/null 2>&1
  elif have nohup; then
    nohup sh -lc "$CMD" >/dev/null 2>&1 &
  else
    (sh -lc "$CMD" >/dev/null 2>&1 &)
  fi
}

# ---------- OUVERTURE RAPPORT (background) ----------
open_report_bg() {
  ABS="$PWD/$REPORT_FILE"
  if have powershell.exe; then
    powershell.exe -NoProfile -ExecutionPolicy Bypass -Command "Start-Process '$ABS'" >/dev/null 2>&1
  elif have open; then
    if [ -d "/Applications/Google Chrome.app" ]; then
      open -a "Google Chrome" "$ABS" >/dev/null 2>&1
    else
      open "$ABS" >/dev/null 2>&1
    fi
  elif have xdg-open; then
    xdg-open "$ABS" >/dev/null 2>&1
  fi
  printf "üîó Rapport: file://%s\n" "$ABS"
}

# ---------- HTML START ----------
cat > "$REPORT_FILE" <<'EOF'
<!DOCTYPE html>
<html lang="fr">
<head>
<meta charset="UTF-8">
<title>Husky Pre-push Report</title>
<style>
  body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; background:#181A20; color:#EEE; padding:20px; }
  h1 { color:#22C55E; margin:0 0 8px; }
  #subtitle { color:#9aa3b2; margin:0 0 16px; }
  table { width:100%; border-collapse:collapse; margin-top:12px; }
  th, td { padding:10px; border:1px solid #333; text-align:left; }
  th { background:#222; }
  .ok { color:#22C55E; font-weight:bold; }
  .warn { color:#FACC15; font-weight:bold; }
  .err { color:#EF4444; font-weight:bold; }
  a { color:#22C55E; font-weight:bold; text-decoration:none; }
  a:hover { text-decoration:underline; }
  .summary { margin-top:18px; padding:12px; background:#11151c; border:1px solid #2a2f3a; border-radius:8px; }
</style>
</head>
<body>
<h1>üö¶ Husky Pre-push Report</h1>
<p id="subtitle">V√©rifications rapides (non bloquantes). Les √©ventuelles corrections peuvent √™tre lanc√©es en arri√®re-plan.</p>
<table>
<tr><th>V√©rification</th><th>Statut</th><th>Recommandation</th><th>Docs</th></tr>
EOF

# ---------- CHECKS L√âGERS ----------
NODE_V="$(node -v 2>/dev/null)"
if [ -n "$NODE_V" ]; then
  row "Node pr√©sent ($NODE_V)" ok "OK" "https://nodejs.org"
else
  row "Node" err "Installer Node LTS (>=18)" "https://nodejs.org/en/download"
  ANS="$(prompt_yn_15s "Installer Node LTS maintenant (Windows: winget) ?")"
  [ "$ANS" = "y" ] && bg_run "winget install -e --id OpenJS.NodeJS.LTS -s winget || choco install nodejs-lts -y"
fi

if have pnpm; then PM="pnpm"
elif have yarn; then PM="yarn"
elif have npm; then PM="npm"
else PM="-"; fi
if [ "$PM" = "-" ]; then
  row "Package manager" warn "Installe pnpm/yarn/npm" "https://pnpm.io / https://yarnpkg.com / https://docs.npmjs.com"
else
  row "Package manager d√©tect√©" ok "Utilisation de $PM" "#"
fi

EXPO_OK="0"
if have expo; then
  EXPO_OK="1"
else
  # npx expo fonctionne sans install globale, mais on propose l‚Äôinstall globale pour le confort
  row "Expo CLI" warn "Utilise 'npx expo' ou installe expo-cli globalement" "https://docs.expo.dev"
  ANS="$(prompt_yn_15s "Installer Expo CLI globalement (npm i -g expo-cli) ?")"
  [ "$ANS" = "y" ] && bg_run "npm i -g expo-cli"
fi
[ "$EXPO_OK" = "1" ] && row "Expo CLI" ok "OK" "https://docs.expo.dev"

if have firebase; then
  row "Firebase Tools" ok "OK" "https://firebase.google.com/docs/cli"
else
  row "Firebase Tools" warn "Installe firebase-tools (ou utilise npx firebase)" "https://firebase.google.com/docs/cli"
  ANS="$(prompt_yn_15s "Installer Firebase Tools (npm i -g firebase-tools) ?")"
  [ "$ANS" = "y" ] && bg_run "npm i -g firebase-tools"
fi

if [ -f pnpm-lock.yaml ] || [ -f yarn.lock ] || [ -f package-lock.json ]; then
  row "Lockfile" ok "OK" "#"
else
  row "Lockfile" warn "Cr√©e un lockfile pour des builds reproductibles" "#"
fi

if [ -f package.json ]; then
  row "Lint" warn "Tu peux lancer '$PM run lint' plus tard si besoin" "cmd:$PM run lint"
else
  row "package.json" ok "Projet non JS/TS : rien √† faire" "#"
fi

# ---------- HTML END ----------
cat >> "$REPORT_FILE" <<'EOF'
</table>
<div class="summary">
  <p>‚úÖ Conclusion : le push continue. Ce hook est non bloquant.</p>
</div>
</body></html>
EOF

# Ouvre le rapport en ARRI√àRE-PLAN et imprime un lien cliquable
open_report_bg || true

echo "‚úÖ [husky] Pre-push non-bloquant ex√©cut√©. Le push continue."
exit 0
