#!/bin/sh
# Husky shim (peut activer `set -e` en interne)
. "$(dirname "$0")/_/husky.sh" 2>/dev/null || true

# Toujours non-bloquant (on n'√©choue jamais le push)
set +e

echo ""
echo "üö¶ [husky] Pr√©-push ‚Äî v√©rifications d'environnement (lecture seule, non bloquant)"
echo "    - Node/Yarn/Expo pr√©sents et versions"
echo "    - Coh√©rence des d√©pendances Expo"
echo "    - Lockfile/installation probable (sans modifier)"
echo ""

# ---------- Helpers ----------
have() { command -v "$1" >/dev/null 2>&1; }

print_kv() { printf "   ‚Ä¢ %-22s %s\n" "$1" "$2"; }

# ---------- Versions ----------
NODE_VER="absent"
YARN_VER="absent"
EXPO_VER="absent"

if have node; then NODE_VER="$(node -v 2>/dev/null)"; fi
if have yarn; then YARN_VER="$(yarn -v 2>/dev/null)"; fi
if have expo; then EXPO_VER="$(expo --version 2>/dev/null)"; fi

echo "üîé Versions d√©tect√©es :"
print_kv "Node" "$NODE_VER"
print_kv "Yarn" "$YARN_VER"
print_kv "Expo CLI" "$EXPO_VER"
echo ""

# ---------- Conseils versions ----------
# Node recommand√© >= 18
if have node; then
  NODE_MAJOR="$(node -p 'process.versions.node.split(".")[0]' 2>/dev/null)"
  if [ -n "$NODE_MAJOR" ] && [ "$NODE_MAJOR" -lt 18 ] 2>/dev/null; then
    echo "‚ö†Ô∏è  Node < 18 d√©tect√©. Conseill√© : Node 18+"
    echo "    üëâ installe via nvm : nvm install 18 && nvm use 18"
    echo ""
  fi
else
  echo "‚ö†Ô∏è  Node non d√©tect√©. Installe Node.js (>= 18) : https://nodejs.org/"
  echo ""
fi

# ---------- Yarn flavor ----------
YARN_MAJOR=""
if [ "$YARN_VER" != "absent" ]; then
  YARN_MAJOR="$(echo "$YARN_VER" | cut -d. -f1 2>/dev/null)"
fi

if [ -z "$YARN_MAJOR" ]; then
  echo "‚ÑπÔ∏è  Yarn non d√©tect√©. Tu peux utiliser npm, mais le projet semble bas√© sur Yarn."
  echo "    üëâ npm i -g yarn"
  echo ""
fi

# ---------- Check Expo deps (lecture seule) ----------
if have npx; then
  echo "üß™ V√©rification Expo deps (lecture seule)‚Ä¶"
  CI=1 npx expo install --check >/dev/null 2>&1
  EXPO_CHECK=$?
  if [ $EXPO_CHECK -ne 0 ]; then
    echo "‚ö†Ô∏è  Incoh√©rences Expo d√©tect√©es."
    echo "    üëâ corrige : npx expo install"
    echo "    (ou : yarn add <pkg>@expo ‚Äî selon les suggestions de 'expo install')"
    echo ""
  else
    echo "‚úÖ Expo deps OK"
    echo ""
  fi
else
  echo "‚ÑπÔ∏è  npx non disponible ‚Äî skip 'expo install --check'."
  echo ""
fi

# ---------- V√©rification lockfile sans modifier ----------
# Yarn Berry (>=2) : --immutable ; Yarn v1 : --frozen-lockfile
if have yarn; then
  if [ -n "$YARN_MAJOR" ] && [ "$YARN_MAJOR" -ge 2 ] 2>/dev/null; then
    echo "üß™ Yarn Berry: test lockfile (--immutable, lecture seule)‚Ä¶"
    YARN_ENABLE_INLINE_BUILDS=1 CI=1 yarn install --immutable --mode=skip-build >/dev/null 2>&1
    IMM=$?
    if [ $IMM -ne 0 ]; then
      echo "‚ö†Ô∏è  D√©pendances potentiellement non install√©es / lockfile drift."
      echo "    üëâ corrige : yarn install"
      echo "    üëâ d√©dupe : yarn dedupe"
      echo ""
    else
      echo "‚úÖ Lockfile OK (Berry)"
      echo ""
    fi
  else
    echo "üß™ Yarn v1: test lockfile (--frozen-lockfile, lecture seule)‚Ä¶"
    CI=1 yarn install --frozen-lockfile --ignore-scripts >/dev/null 2>&1
    FROZ=$?
    if [ $FROZ -ne 0 ]; then
      echo "‚ö†Ô∏è  D√©pendances possiblement out-of-sync."
      echo "    üëâ corrige : yarn install"
      echo "    üëâ d√©dupe (Yarn v1) : npm i -D yarn-deduplicate && npx yarn-deduplicate yarn.lock && yarn install"
      echo ""
    else
      echo "‚úÖ Lockfile OK (Yarn v1)"
      echo ""
    fi
  fi
else
  echo "‚ÑπÔ∏è  Yarn non trouv√© ‚Äî skip test lockfile."
  echo ""
fi

# ---------- Expo Doctor (lecture seule) ----------
if have npx; then
  echo "ü©∫ expo doctor (lecture seule)‚Ä¶"
  npx expo doctor >/dev/null 2>&1
  EXPO_DOC=$?
  if [ $EXPO_DOC -ne 0 ]; then
    echo "‚ö†Ô∏è  expo doctor signale des probl√®mes."
    echo "    üëâ lance : npx expo doctor"
    echo "    üëâ puis suis les recommandations (packages, SDK, env)."
    echo ""
  else
    echo "‚úÖ expo doctor OK"
    echo ""
  fi
else
  echo "‚ÑπÔ∏è  npx non disponible ‚Äî skip expo doctor."
  echo ""
fi

# ---------- Java/Android SDK (facultatif, info) ----------
if have java; then
  JAVA_VER="$(java -version 2>&1 | head -n1 | sed 's/"/ /g')"
  print_kv "Java" "$JAVA_VER"
fi
if [ -n "$ANDROID_HOME" ]; then
  print_kv "ANDROID_HOME" "$ANDROID_HOME"
fi
echo ""

echo "‚úÖ [husky] Pr√©-push termin√©. Rien n'a √©t√© modifi√©, push autoris√©."
exit 0
