// libs/registerDevice.js
// ============================================================
// VigiApp ‚Äî Register Device util
// - Upsert device en Firestore
// - Stocke expoPushToken ET fcmDeviceToken
// - CEP obligatoire (li√© aux groupes), mais pas aux alertes publiques
// - Logs d√©taill√©s pour debug
// ============================================================

import { getFirestore, setDoc, doc, serverTimestamp } from 'firebase/firestore';
import { Platform } from 'react-native';

// Util log horodat√©
function ts() {
  try {
    return new Date().toISOString();
  } catch {
    return String(Date.now());
  }
}
function log(...args) {
  try {
    console.log(`[registerDevice][${ts()}]`, ...args);
  } catch {}
}
function warn(...args) {
  try {
    console.warn(`[registerDevice][${ts()}]`, ...args);
  } catch {}
}
function err(...args) {
  try {
    console.error(`[registerDevice][${ts()}]`, ...args);
  } catch {}
}

/**
 * Enregistre ou met √† jour un device dans Firestore
 * @param {Object} params
 * @param {string} params.userId - UID Firebase Auth
 * @param {string} params.expoPushToken - Token Expo (docId utilis√©)
 * @param {string} params.fcmDeviceToken - Token FCM natif (optionnel mais recommand√©)
 * @param {string} params.cep - CEP (obligatoire pour logique groupe)
 * @param {number|null} params.lat - latitude (optionnelle)
 * @param {number|null} params.lng - longitude (optionnelle)
 * @param {string|null} params.geohash - geohash si calcul√©
 * @param {Array} params.groups - liste d‚ÄôIDs de groupes li√©s
 */
export async function upsertDevice({
  userId = 'ANON',
  expoPushToken,
  fcmDeviceToken = null,
  cep,
  lat = null,
  lng = null,
  geohash = null,
  groups = [],
}) {
  try {
    // V√©rifs obligatoires
    if (!expoPushToken) {
      warn('‚ùå expoPushToken manquant');
      return { ok: false, error: 'expoPushToken requis' };
    }
    if (!cep) {
      warn('‚ùå CEP manquant (obligatoire pour devices enregistr√©s)');
      return { ok: false, error: 'CEP requis' };
    }

    const db = getFirestore();

    // S√©curisation du docId (Expo tokens n'ont pas de "/" mais on anticipe)
    const docId = expoPushToken.replace(/\//g, '_');
    const ref = doc(db, 'devices', docId);

    // Payload final
    const payload = {
      userId,
      expoPushToken,
      fcmDeviceToken, // ‚úÖ nouveau champ
      type: 'expo+fcm', // trace qu‚Äôon stocke les deux
      cep: String(cep),
      platform: Platform.OS,
      lat,
      lng,
      geohash,
      groups: Array.isArray(groups) ? groups : [],
      updatedAt: serverTimestamp(),
    };

    log('üì° Upserting device', { docId, userId, cep, hasFCM: !!fcmDeviceToken });

    await setDoc(ref, payload, { merge: true });

    log('‚úÖ Device enregistr√©/MAJ avec succ√®s', docId);
    return { ok: true };
  } catch (e) {
    err('üî• Erreur upsertDevice', e?.message || e);
    return { ok: false, error: e?.message || String(e) };
  }
}
// Fin registerDevice.js
