pluginManagement {
  repositories {
    google()
    mavenCentral()
    gradlePluginPortal()
    // D√©p√¥ts locaux pour RN/Expo
    maven { url file("../node_modules/react-native/android") }
  }
  // üëá Branche les plugins Gradle fournis par npm
  includeBuild("../node_modules/@react-native/gradle-plugin")
  includeBuild("../node_modules/expo/packages/expo-gradle-plugin")
}

dependencyResolutionManagement {
  repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
  repositories {
    google()
    mavenCentral()
    maven { url 'https://www.jitpack.io' }
    // AARs RN et (au besoin) JSC depuis node_modules
    maven { url file("../node_modules/react-native/android") }
    maven { url file("../node_modules/jsc-android/dist") }
  }
}

rootProject.name = "VigiApp"
include(":app")

// ===== Autolinking React Native =====
def nodeResolve = { moduleName ->
  providers.exec {
    workingDir(rootDir)
    commandLine("node", "--print", "require.resolve('${moduleName}/package.json')")
  }.standardOutput.asText.get().trim()
}
def safeApply = { File scriptFile, String label ->
  if (scriptFile != null && scriptFile.exists()) { apply from: scriptFile; true }
  else { println("‚ö†Ô∏è  [settings.gradle] ${label} introuvable: " + (scriptFile?.absolutePath ?: "null")); false }
}
try {
  def rnCliPkg = new File(nodeResolve("@react-native-community/cli-platform-android")).getParentFile()
  def rnNativeModulesGradle = new File(rnCliPkg, "native_modules.gradle")
  if (!safeApply(rnNativeModulesGradle, "RN native_modules.gradle")) {
    safeApply(file("../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"),
              "RN native_modules.gradle (fallback)")
  }
  try { applyNativeModulesSettingsGradle(settings) }
  catch (Throwable t) { println("‚ÑπÔ∏è  [settings.gradle] applyNativeModulesSettingsGradle indisponible (autolinking RN ignor√©).") }
} catch (Throwable e) {
  println("‚ö†Ô∏è  [settings.gradle] Impossible de r√©soudre @react-native-community/cli-platform-android via Node.")
}

// ===== Expo Modules Autolinking =====
try {
  def expoAutoPkg = new File(nodeResolve("expo-modules-autolinking")).getParentFile()
  def expoAutoGradle = new File(expoAutoPkg, "gradle/expo-modules-autolinking.gradle")
  if (!safeApply(expoAutoGradle, "Expo Modules autolinking")) {
    safeApply(file("../node_modules/expo-modules-autolinking/gradle/expo-modules-autolinking.gradle"),
              "Expo Modules autolinking (fallback)")
  }
  try { useExpoModules() }
  catch (Throwable t) { println("‚ÑπÔ∏è  [settings.gradle] useExpoModules indisponible (autolinking Expo ignor√©).") }
} catch (Throwable e) {
  println("‚ö†Ô∏è  [settings.gradle] Impossible de r√©soudre expo-modules-autolinking via Node.")
}
